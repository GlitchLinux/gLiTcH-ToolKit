#!/bin/bash

# Color codes
RED='\033[0;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;35m'
BLUE='\033[1;35m'
NC='\033[0m'

#---------------#
# Rapid IPXE VM #
#---------------#
ISO_URL="https://github.com/GlitchLinux/IPXE-MultiBoot/raw/refs/heads/main/glitchNET-ipxe-hybrid.iso"
ISO_DIR="/tmp/ipxe"
ISO_PATH="$ISO_DIR/glitchNET-ipxe-hybrid.iso"

#-------#
# Setup #
#-------#
mkdir -p "$ISO_DIR"
echo ""
#echo -e "\n[*] Downloading iPXE ISO to $ISO_PATH..."
curl -L --silent --show-error "$ISO_URL" -o "$ISO_PATH" || {
    echo "[!] Download failed!"
    exit 1
}

#-----------
# Main Loop
#---------------------------------------
while true; do
    echo ""
    echo -e "${GREEN}╭────────────────────────╮${NC}"
    echo -e "${GREEN}│${NC} Rapid IPXE VM LAUNCHER ${GREEN}│${NC}" 
    echo -e "${GREEN}╰────────────────────────╯${NC}"
    # Boot Mode Selection
    echo -e "\nChoose Boot Mode:"
    echo ""
    echo "1) BIOS"
    echo "2) UEFI"
    echo ""
    read -rp "Enter 1 or 2: " BOOT_MODE

    if [[ "$BOOT_MODE" != "1" && "$BOOT_MODE" != "2" ]]; then
        echo "[!] Invalid option. Please enter 1 or 2."
        continue
    fi

    # RAM Configuration
    read -rp "Enter to use 5000MB RAM or input new value (in MB): " RAM_MB
    RAM_MB=${RAM_MB:-5000}

    # Extra Disk Option
    read -rp "Add disk to VM? Enter for no, Y to add: " ADD_DISK
    EXTRA_DISK=""

    if [[ "$ADD_DISK" =~ ^[Yy]$ ]]; then
        echo -e "\nAvailable Disks:"
        lsblk
        echo
        fdisk -l 2>/dev/null | grep '^Disk /dev/' || true

        read -rp "Enter full device path (e.g., /dev/sdx): " DISK_PATH
        if [[ ! -b "$DISK_PATH" ]]; then
            echo "[!] Invalid disk path. Skipping extra disk."
        else
            EXTRA_DISK="-drive file=$DISK_PATH,format=raw,if=virtio"
        fi
    fi

    #----------------#
    # Launch QEMU VM #
    #----------------#-
    echo ""
    echo -e "\n[*] Launching QEMU VM...\n"

    if [[ "$BOOT_MODE" == "1" ]]; then
        # BIOS Boot
        qemu-system-x86_64 \
            -enable-kvm \
            -m "$RAM_MB" \
            -boot d \
            -cdrom "$ISO_PATH" \
            $EXTRA_DISK \
            -net nic -net user \
            > /dev/null 2>&1 &
    else
        # UEFI Boot
        if [[ ! -f /usr/share/OVMF/OVMF_CODE.fd && ! -f /usr/share/OVMF/OVMF_CODE.bin ]]; then
            echo "[!] UEFI firmware not found. Install 'ovmf' package."
            exit 1
        fi

        OVMF_PATH="/usr/share/OVMF/OVMF_CODE.fd"
        [[ -f "$OVMF_PATH" ]] || OVMF_PATH="/usr/share/OVMF/OVMF_CODE.bin"

        qemu-system-x86_64 \
            -enable-kvm \
            -m "$RAM_MB" \
            -bios "$OVMF_PATH" \
            -boot d \
            -cdrom "$ISO_PATH" \
            $EXTRA_DISK \
            -net nic -net user \
            > /dev/null 2>&1 &
    fi

    disown

    echo -e "[*] VM started in background (output hidden)."
    echo "    Please use your window manager to interact with the VM window."

    echo -e "\n[*] Waiting for VM to shut down. Press ENTER when VM is closed to continue..."
    read -rp ""

    echo
    read -rp "Boot another VM? (y/n): " AGAIN
    [[ "$AGAIN" != "y" && "$AGAIN" != "Y" ]] && break
done

#---------#
# See ya! #
#---------#
echo ""
echo -e "\n[*] All done. Exiting.\n"
