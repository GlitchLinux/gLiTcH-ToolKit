#!/bin/bash

# Script to install fastfetch, configure it for STATS ONLY (No Logo - v10),
# setup .bashrc to run it (including 'glitch' alias), and backup the existing .bashrc.
# NOTE: Uses default formats, attempts green keys/separator.

BASHRC_FILE="$HOME/.bashrc"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_FILE="${BASHRC_FILE}.bak_ff_glitch_${TIMESTAMP}"
CONFIG_DIR="$HOME/.config/fastfetch"
# No ASCII_FILE needed
CONFIG_FILE="$CONFIG_DIR/config.jsonc"

echo "--- No-Logo Fastfetch .bashrc Installer (v10) ---"
echo "[WARN] This script requires Nerd Fonts for icons to display correctly."
echo "[INFO] Will attempt to install 'fastfetch'."

# --- Helper Functions ---
print_info() { echo "[INFO] $1"; }
print_success() { echo "[SUCCESS] $1"; }
print_warn() { echo "[WARN] $1"; }
print_error() { echo "[ERROR] $1"; }

# --- Installation ---

# 1. Install fastfetch (Check added)
if ! command -v fastfetch &> /dev/null; then
    print_info "fastfetch not found. Attempting to install..."
    if sudo apt update && sudo apt install -y fastfetch; then
        print_success "fastfetch installed successfully."
    else
        print_error "Failed to install fastfetch. Please install it manually and re-run."
        exit 1
    fi
else
    print_info "fastfetch is already installed."
fi

# 2. Backup existing .bashrc (Check added)
if [ -f "$BASHRC_FILE" ] && ! grep -q "# --- Run Fastfetch on Login ---" "$BASHRC_FILE"; then
    print_info "Found existing configuration at $BASHRC_FILE (doesn't seem to have fastfetch yet)"
    print_info "Creating backup: $BACKUP_FILE ..."
    if cp "$BASHRC_FILE" "$BACKUP_FILE"; then
        print_success "Backup created successfully."
    else
        print_error "Failed to create backup. Aborting."
        exit 1
    fi
elif [ -f "$BASHRC_FILE" ]; then
     print_info "Existing $BASHRC_FILE found, appears to have fastfetch section already. Skipping backup."
else
    print_info "No existing $BASHRC_FILE found. Skipping backup."
fi

# 3. Create config directory
if mkdir -p "$CONFIG_DIR"; then
    print_info "Ensured fastfetch config directory exists: $CONFIG_DIR"
else
    print_error "Failed to create config directory: $CONFIG_DIR"
    exit 1
fi

# 4. ASCII File Creation REMOVED

# 5. Create fastfetch config file (v10 - No Logo, Display attempt)
print_info "Creating/Updating fastfetch config file: $CONFIG_FILE ..."
cat > "$CONFIG_FILE" << EOF
// ~/.config/fastfetch/config.jsonc (v10 - No Logo, Display Attempt)
{
  "\$schema": "https://github.com/fastfetch-cli/fastfetch/raw/dev/doc/json_schema.json",
  "logo": {
    "type": "none" // Disable logo display
  },
  // Re-attempting simplified display section - remove if it causes errors
  "display": {
    "separator": "  󰑃 ",      // Nerd Font icon separator
    "keyColor": "light_green" // Color for keys like 'OS', 'Kernel'
  },
  "modules": [
    // Most "format" keys removed to use defaults, which seem more compatible.
    // Keys use Nerd Font icons for minimal look.
    {"type": "title"}, // Default format (usually user@host)
    "break",

    {"type": "os", "key": ""},
    {"type": "kernel", "key": ""},
    {"type": "packages", "key": "󰏖"},
    {"type": "uptime", "key": ""},
    {"type": "shell", "key": ""},
    "separator",

    {"type": "de", "key": ""},
    {"type": "theme", "key": "󰉼"},
    {"type": "icons", "key": "󰀻"},
    {"type": "font", "key": ""},
    {"type": "terminal", "key": ""},
    "separator",

    {"type": "host", "key": "󰌢"},
    {"type": "cpu", "key": "󰻠"},
    {"type": "gpu", "key": "󰻑"},
    {"type": "display", "key": "󰍹"},
    {"type": "memory", "key": "󰾆"}, // Using default format
    {"type": "disk", "key": " /", "paths": ["/"]}, // Using default format for /
    "separator",

    {"type": "publicip", "key": " IP"}, // Default format
    "break",
    "colors"
  ]
}
EOF
# Check the config file write was successful before proceeding
if [ $? -ne 0 ]; then
    print_error "Failed to create fastfetch config file."
    exit 1
else
     print_success "Fastfetch config file created/updated."
fi


# 6. Write the new .bashrc configuration (with glitch alias)
# (No changes needed in .bashrc itself from previous versions)
print_info "Checking/Updating .bashrc configuration..."
touch "$BASHRC_FILE"
# Remove existing fastfetch block if present to avoid duplicates
sed -i '/# --- Run Fastfetch on Login ---/,/# End of .bashrc ---/d' "$BASHRC_FILE" 2>/dev/null
# Write the main .bashrc content (excluding the fastfetch call for now)
cat > "$BASHRC_FILE" << 'EOF'
# ~/.bashrc: executed by bash(1) for non-login shells.

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# --- History Control ---
HISTCONTROL=ignoreboth
shopt -s histappend
HISTSIZE=10000
HISTFILESIZE=20000
shopt -s checkwinsize

# --- Color Settings ---
force_color_prompt=yes
if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    color_prompt=yes
else
    color_prompt=no
fi

if [ "$color_prompt" = yes ]; then
    export LS_COLORS='rs=0:di=1;92:ln=1;96:mh=0:pi=40;33:so=1;95:do=1;95:bd=40;33;1:cd=40;33;1:or=40;31;1:mi=0:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=1;91:*~=0;90:*bak=0;90:*.log=0;90:*.txt=0;37:*.md=0;37:*.sh=1;93:*.py=1;93:*.js=1;93:*.c=1;93:*.cpp=1;93:*.h=1;93:*.php=1;93:*.pl=1;93:*.rb=1;93:*.json=0;37:*.xml=0;37:*.html=0;37:*.css=0;37:*.jpg=1;95:*.jpeg=1;95:*.png=1;95:*.gif=1;95:*.svg=1;95:*.bmp=1;95:*.tiff=1;95:*.webp=1;95:*.mp3=0;95:*.ogg=0;95:*.wav=0;95:*.flac=0;95:*.opus=0;95:*.mp4=0;95:*.mkv=0;95:*.avi=0;95:*.mov=0;95:*.wmv=0;95:*.zip=1;91:*.tar=1;91:*.gz=1;91:*.bz2=1;91:*.xz=1;91:*.7z=1;91:*.rar=1;91:*.iso=1;91:*.deb=1;91:*.rpm=1;91:*.pdf=0;91:*.gpg=1;94:*.asc=1;94:'
    export LS_OPTIONS='--color=auto'
    export GREP_OPTIONS='--color=auto'
    alias grep='grep $GREP_OPTIONS'
    alias egrep='egrep $GREP_OPTIONS'
    alias fgrep='fgrep $GREP_OPTIONS'
    alias ls='ls $LS_OPTIONS'
fi

# --- Custom Prompt (PS1) ---
if [ "$color_prompt" = yes ]; then
    L_GREEN="\[\e[1;92m\]"
    D_GREEN="\[\e[0;32m\]"
    GREY="\[\e[0;90m\]"
    RESET="\[\e[0m\]"
    if [ "$(id -u)" -eq 0 ]; then P_SYMBOL="#"; else P_SYMBOL="$"; fi
    PS1="${L_GREEN}\u${GREY}@${L_GREEN}\h${D_GREEN}:${L_GREEN}\w ${L_GREEN}${P_SYMBOL}${RESET} "
else
    PS1='\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt L_GREEN D_GREEN GREY RESET P_SYMBOL

# --- Aliases ---
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias cls='clear'
alias path='echo -e ${PATH//:/\\n}'
alias l='ls -CF'
alias la='ls -A'
alias ll='ls -alFh'
alias update='sudo apt update && sudo apt full-upgrade -y'
alias search='apt search'
alias install='sudo apt install -y'
alias remove='sudo apt remove -y'
alias autoremove='sudo apt autoremove -y'
alias clean='sudo apt clean'
alias ports='sudo netstat -tulnp'
alias ports-ss='sudo ss -tulnp'
alias myip-local='ip -4 addr show | grep inet | grep -v "127.0.0.1" | awk "{print \$2}" | cut -d "/" -f 1'
alias myip-public='fastfetch --structure title:publicip' # Simpler fallback alias
alias sha256='sha256sum'
alias md5='md5sum'
alias glitch='exec $SHELL' # Custom alias to refresh shell

# --- Functions ---
mkcd() { mkdir -p "$@" && cd "$@" || return 1; }
extract() {
    if [ -z "$1" ]; then echo "Usage: extract <filename>"; return 1; fi
    if [ -f "$1" ] ; then
        case "$1" in
            *.tar.bz2) tar xvjf "$1" ;; *.tar.gz) tar xvzf "$1" ;; *.tar.xz) tar xvJf "$1" ;;
            *.bz2) bunzip2 "$1" ;; *.rar) unrar x "$1" ;; *.gz) gunzip "$1" ;;
            *.tar) tar xvf "$1" ;; *.tbz2) tar xvjf "$1" ;; *.tgz) tar xvzf "$1" ;;
            *.zip) unzip "$1" ;; *.Z) uncompress "$1" ;; *.7z) 7z x "$1" ;;
            *.deb) dpkg -x "$1" "${1%.deb}" ;;
            *) echo "'$1' cannot be extracted via extract()" ;;
        esac
    else echo "'$1' is not a valid file"; fi
}

# --- Bash Completion ---
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# --- Set Default Editor ---
export EDITOR=nano

# --- User Customizations ---
# Add any other personal aliases, functions, or settings below this line

EOF

# Append the fastfetch execution block
cat >> "$BASHRC_FILE" << 'EOF'

# --- Run Fastfetch on Login ---
# Check if command exists and shell is interactive and stdout is a tty
if command -v fastfetch &> /dev/null && [ -t 1 ] && [[ $- == *i* ]]; then
    # Pointing fastfetch to the specific config file
    fastfetch --config "$HOME/.config/fastfetch/config.jsonc"
fi

# End of .bashrc ---
EOF


# Final check and completion message
if [ -s "$BASHRC_FILE" ] && grep -q "# --- Run Fastfetch on Login ---" "$BASHRC_FILE" && grep -q "alias glitch='exec \$SHELL'" "$BASHRC_FILE"; then
    print_success "New .bashrc configuration written successfully."
else
    print_error "Failed to write new .bashrc configuration."
    print_info "Your original .bashrc might still be available as $BACKUP_FILE (if backup was created)."
    exit 1
fi
echo ""
print_success "--- Installation Complete ---"
echo ""
echo "To apply the new settings, please either:"
echo "  1. Close this terminal and open a new one."
echo "  2. Run the command: source ~/.bashrc"
echo "  3. Run the new alias: glitch"
echo ""
if [ -f "$BACKUP_FILE" ]; then
    echo "Your previous configuration was backed up to: $BACKUP_FILE"
fi
echo "Remember to install a Nerd Font and set it in your terminal for icons!"
echo "[INFO] Fastfetch is now configured to show STATS ONLY (No Logo)."
echo "[INFO] Attempted to set green keys/separator. If errors occur or style is wrong,"
echo "[INFO] please provide 'fastfetch --version' and default 'display' config section."
echo ""
exit 0
