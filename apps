#!/bin/bash

# Set repository URL and local directory
REPO_URL="https://github.com/GlitchLinux/gLiTcH-ToolKit.git"
LOCAL_DIR="gLiTcH-ToolKit"

# Define ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PINK='\033[1;35m'
NC='\033[0m' # No Color

# Cleanup function (runs on exit)
cleanup() {
    echo -e "${YELLOW}Cleaning up...${NC}"
    # Only use sudo if necessary (if files are owned by root)
    if [ -d "/tmp/$LOCAL_DIR" ]; then
        sudo chown -R "$USER:$USER" "/tmp/$LOCAL_DIR" 2>/dev/null || true
        rm -rf "/tmp/$LOCAL_DIR" 2>/dev/null || echo -e "${RED}Failed to clean up temporary files.${NC}"
    fi
}
trap cleanup EXIT

# Navigate to /tmp directory
cd /tmp || { echo -e "${RED}Failed to navigate to /tmp.${NC}"; exit 1; }

# Clone or update repository
if [ -d "$LOCAL_DIR/.git" ]; then
    echo -e "${YELLOW}Updating repository...${NC}"
    # Fix permissions before updating (in case of previous sudo usage)
    chmod -R u+rw "$LOCAL_DIR" 2>/dev/null || true
    git -C "$LOCAL_DIR" pull || { echo -e "${RED}Failed to update repository.${NC}"; exit 1; }
else
    echo -e "${YELLOW}Cloning repository...${NC}"
    git clone "$REPO_URL" "$LOCAL_DIR" || { echo -e "${RED}Failed to clone repository.${NC}"; exit 1; }
    # Set correct permissions after cloning
    chmod -R u+rw "$LOCAL_DIR" 2>/dev/null || true
fi

# Main loop
while true; do
    clear
    echo -e "${YELLOW}gLiTcH-ToolKit - Linux System Tools${NC}"
    echo ""

    # Get sorted list of tools (case-insensitive) excluding hidden files
    mapfile -t entries < <(find "$LOCAL_DIR" -mindepth 1 -maxdepth 1 -not -path "*/.git*" -type f -printf "%f\n" | sort -f)

    # Check if any tools are available
    if [ ${#entries[@]} -eq 0 ]; then
        echo -e "${RED}No tools found in the repository.${NC}"
        echo -e "${YELLOW}Recloning repository to repopulate...${NC}"
        rm -rf "$LOCAL_DIR" 2>/dev/null || true
        git clone "$REPO_URL" "$LOCAL_DIR" || { echo -e "${RED}Failed to re-clone repository.${NC}"; exit 1; }
        mapfile -t entries < <(find "$LOCAL_DIR" -mindepth 1 -maxdepth 1 -not -path "*/.git*" -type f -printf "%f\n" | sort -f)
        
        if [ ${#entries[@]} -eq 0 ]; then
            echo -e "${RED}Repository appears to be empty or invalid.${NC}"
            exit 1
        fi
    fi

    # Display tools in columns
    num_entries=${#entries[@]}
    num_columns=3
    num_rows=$(( (num_entries + num_columns - 1) / num_columns ))
    max_width=35

    for (( row=0; row<num_rows; row++ )); do
        for (( col=0; col<num_columns; col++ )); do
            index=$(( row + col * num_rows ))
            if (( index < num_entries )); then
                printf "${GREEN}%3d. ${PINK}%-*s${NC}" "$((index+1))" "$max_width" "${entries[index]}"
            fi
        done
        echo ""
    done

    echo ""
    echo -e -n "${YELLOW}Enter a number to execute (1-${#entries[@]}), or 0 to quit: ${NC}"
    read -r choice
    
    if [[ "$choice" == "0" ]]; then
        break
    elif [[ "$choice" =~ ^[0-9]+$ ]] && (( choice >= 1 && choice <= ${#entries[@]} )); then
        selected="$LOCAL_DIR/${entries[$((choice-1))]}"
        if [ -x "$selected" ]; then
            echo -e "${YELLOW}Executing ${CYAN}$selected${NC}..."
            "$selected"
        else
            bash "$selected"
        fi
        echo -e "\n${PINK}Press Enter to continue${NC}"
        read -r
    else
        echo -e "${RED}Invalid selection!${NC}"
        sleep 1
    fi
done

# Navigate to /tmp directory
cd /tmp || { echo -e "${RED}Failed to navigate to /tmp.${NC}"; exit 1; }

# Clone or update repository
if [ -d "$LOCAL_DIR/.git" ]; then
    echo -e "${YELLOW}Updating repository...${NC}"
    # Fix permissions before updating (in case of previous sudo usage)
    chmod -R u+rw "$LOCAL_DIR" 2>/dev/null || true
    git -C "$LOCAL_DIR" pull || { echo -e "${RED}Failed to update repository.${NC}"; exit 1; }

exit 
