#!/bin/bash

cd /tmp || exit

# Colors
G='\033[0;32m'  # Green
Y='\033[1;35m'  # Yellow  
C='\033[0;36m'  # Cyan
N='\033[0m'     # Normal

REPO="https://github.com/GlitchLinux/gLiTcH-ToolKit.git"
DIR="gLiTcH-ToolKit"

# Clone function
clone() {
    rm -rf "$DIR" 2>/dev/null || sudo rm -rf "$DIR"
    [ "$1" = "root" ] && sudo git clone "$REPO" "$DIR" || git clone "$REPO" "$DIR"
}

# Calculate column layout
calculate_layout() {
    local items=$1
    local min_cols=3
    local max_cols=4
    local terminal_width=${COLUMNS:-80}
    local col_width=35
    
    local possible_cols=$(( terminal_width / col_width ))
    possible_cols=$(( possible_cols > max_cols ? max_cols : possible_cols ))
    possible_cols=$(( possible_cols < min_cols ? min_cols : possible_cols ))
    
    local rows=$(( (items + possible_cols - 1) / possible_cols ))
    echo "$possible_cols $rows"
}

# Display tools
display_tools() {
    local tools=("$@")
    local count=${#tools[@]}
    local cols rows
    
    read -r cols rows <<< "$(calculate_layout $count)"
    
    echo -e "${C}Glitch Toolkit - ${count} tools available${N}\n"
    
    for ((row=0; row<rows; row++)); do
        for ((col=0; col<cols; col++)); do
            local index=$((row + col*rows))
            if (( index < count )); then
                printf "${Y}%3d.${N} %-30s" "$((index+1))" "${tools[index]}"
            fi
        done
        echo
    done
}

# Initial clone
[ ! -d "$DIR" ] && clone

# Main
while true; do
    mapfile -t T < <(find "$DIR" -type f -not -path "*/.git*" -printf "%f\n" | sort -f)
    
    clear
    display_tools "${T[@]}"
    
    # Modified prompt with cursor on same line and yellow letters
    echo -en "\n${C}[Number|Search]: [${Y}R${C}]efresh [${Y}S${C}]udo [${Y}Q${C}]uit${N} > "
    read -r IN
    
    if [[ "$IN" =~ ^[0-9]+$ ]] && ((IN > 0 && IN <= ${#T[@]})); then
        clear
        echo -e "${Y}Running: ${T[IN-1]}${N}\n"
        F="$DIR/${T[IN-1]}"
        [ -x "$F" ] && "$F" || bash "$F"
        echo -en "\n${C}Press Enter to continue...${N}"
        read -r
    elif [[ "${IN,,}" = "r" ]]; then
        clone
    elif [[ "${IN,,}" = "s" ]]; then
        clone root
    elif [[ "${IN,,}" = "q" ]]; then
        rm -rf "$DIR"
        exit
    elif [ -n "$IN" ]; then
        M=()
        i=1
        for t in "${T[@]}"; do
            [[ "${t,,}" == *"${IN,,}"* ]] && M+=("$i:$t")
            ((i++))
        done
        
        if [ ${#M[@]} -eq 1 ]; then
            IN="${M[0]%%:*}"
            clear
            echo -e "${Y}Running: ${T[IN-1]}${N}\n"
            F="$DIR/${T[IN-1]}"
            [ -x "$F" ] && "$F" || bash "$F"
            echo -en "\n${C}Press Enter to continue...${N}"
            read -r
        elif [ ${#M[@]} -gt 1 ]; then
            clear
            echo -e "${C}Found ${#M[@]} matches:${N}\n"
            for m in "${M[@]}"; do
                echo -e "${Y}${m%%:*}.${N} ${m#*:}"
            done
            echo -en "\n${C}Select match [1-${#M[@]}] or any key to cancel:${N} "
            read -r S
            if [[ "$S" =~ ^[0-9]+$ ]] && ((S > 0 && S <= ${#M[@]})); then
                IN="${M[S-1]%%:*}"
                clear
                echo -e "${Y}Running: ${T[IN-1]}${N}\n"
                F="$DIR/${T[IN-1]}"
                [ -x "$F" ] && "$F" || bash "$F"
                echo -en "\n${C}Press Enter to continue...${N}"
                read -r
            fi
        else
            echo -e "${Y}No matches found${N}"
            sleep 1
        fi
    fi
done
