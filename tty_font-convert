#!/bin/bash

# Convert font from .tar.gz to .psf.gz for TTY use
# Handles extraction and conversion of various font formats

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${GREEN}Font Archive to PSF Converter${NC}"
echo "====================================="

# Check if running as root
if [[ $EUID -ne 0 ]]; then
   echo -e "${RED}This script must be run as root${NC}"
   exit 1
fi

# Function to install dependencies
install_dependencies() {
    echo -e "${BLUE}Installing required packages...${NC}"
    apt-get update -qq
    apt-get install -y console-setup kbd bdf2psf fontforge python3-fontforge tar gzip 2>/dev/null || {
        echo -e "${YELLOW}Some packages may not be available, continuing...${NC}"
    }
}

# Function to extract and analyze tar.gz
extract_and_analyze() {
    local archive_path="$1"
    local extract_dir="/tmp/font_extraction_$(date +%s)"
    
    echo -e "${BLUE}Extracting archive: $archive_path${NC}"
    mkdir -p "$extract_dir"
    
    # Extract to temporary directory
    tar -xzf "$archive_path" -C "$extract_dir"
    
    echo -e "${YELLOW}Contents of archive:${NC}"
    find "$extract_dir" -type f | head -20
    
    echo ""
    echo -e "${YELLOW}Font files found:${NC}"
    find "$extract_dir" -type f \( -name "*.ttf" -o -name "*.otf" -o -name "*.bdf" -o -name "*.psf" -o -name "*.pcf" -o -name "*.fnt" \) | head -20
    
    echo "$extract_dir"
}

# Function to convert font to PSF
convert_to_psf() {
    local font_file="$1"
    local output_name="$2"
    local font_ext="${font_file##*.}"
    local temp_dir="/tmp/psf_conversion_$(date +%s)"
    
    mkdir -p "$temp_dir"
    
    echo -e "${BLUE}Converting: $(basename "$font_file") to PSF format...${NC}"
    
    case "${font_ext,,}" in
        "ttf"|"otf")
            echo "Converting TTF/OTF to PSF via BDF..."
            
            # Create FontForge script
            cat > "$temp_dir/convert.py" << 'EOF'
import fontforge
import sys
import os

if len(sys.argv) < 3:
    print("Usage: convert.py input_font output_base [size]")
    sys.exit(1)

font_path = sys.argv[1]
output_base = sys.argv[2]
size = int(sys.argv[3]) if len(sys.argv) > 3 else 16

try:
    font = fontforge.open(font_path)
    
    # Generate multiple sizes if needed
    sizes = [size] if size != 0 else [8, 12, 14, 16, 18, 20]
    
    for s in sizes:
        output_file = f"{output_base}_{s}.bdf"
        print(f"Generating size {s}px -> {output_file}")
        font.generate(output_file, bitmap_type=fontforge.bitmapType.BDF, 
                     bitmap_resolution=75, pixelsize=s)
    
    font.close()
    print("Conversion completed successfully")
except Exception as e:
    print(f"Error: {e}")
    sys.exit(1)
EOF
            
            # Convert with default size 16
            python3 "$temp_dir/convert.py" "$font_file" "$temp_dir/$output_name" 16
            
            # Use the generated BDF file
            bdf_file="$temp_dir/${output_name}_16.bdf"
            if [ -f "$bdf_file" ]; then
                convert_bdf_to_psf "$bdf_file" "$output_name" "$temp_dir"
            else
                echo -e "${RED}Failed to generate BDF from TTF/OTF${NC}"
                return 1
            fi
            ;;
        "bdf")
            echo "Converting BDF to PSF..."
            convert_bdf_to_psf "$font_file" "$output_name" "$temp_dir"
            ;;
        "pcf")
            echo "Converting PCF to BDF first..."
            # PCF to BDF conversion
            pcf2bdf "$font_file" > "$temp_dir/$output_name.bdf" 2>/dev/null || {
                echo -e "${RED}Failed to convert PCF to BDF${NC}"
                return 1
            }
            convert_bdf_to_psf "$temp_dir/$output_name.bdf" "$output_name" "$temp_dir"
            ;;
        "psf"|"psfu")
            echo "Font is already in PSF format, copying..."
            cp "$font_file" "$temp_dir/$output_name.psf"
            ;;
        *)
            echo -e "${YELLOW}Unsupported/unknown format: $font_ext${NC}"
            echo "Trying to convert as BDF..."
            convert_bdf_to_psf "$font_file" "$output_name" "$temp_dir"
            ;;
    esac
    
    # Final step: compress and install
    if [ -f "$temp_dir/$output_name.psf" ]; then
        gzip -c "$temp_dir/$output_name.psf" > "/usr/share/consolefonts/${output_name}.psf.gz"
        echo -e "${GREEN}Successfully created: ${output_name}.psf.gz${NC}"
        
        # Cleanup
        rm -rf "$temp_dir"
        return 0
    else
        echo -e "${RED}Conversion failed - no PSF file generated${NC}"
        rm -rf "$temp_dir"
        return 1
    fi
}

# Function to convert BDF to PSF
convert_bdf_to_psf() {
    local bdf_file="$1"
    local output_name="$2"
    local temp_dir="$3"
    
    echo "Converting BDF to PSF using bdf2psf..."
    
    # Try different encoding sets
    local encoding_sets=(
        "/usr/share/bdf2psf/ascii.set+/usr/share/bdf2psf/linux.set+/usr/share/bdf2psf/fontsets/Lat15.512"
        "/usr/share/bdf2psf/ascii.set+/usr/share/bdf2psf/linux.set"
        "/usr/share/bdf2psf/ascii.set"
    )
    
    for encoding_set in "${encoding_sets[@]}"; do
        if bdf2psf --fb "$bdf_file" \
           /usr/share/bdf2psf/standard.equivalents \
           "$encoding_set" \
           512 "$temp_dir/$output_name.psf" 2>/dev/null; then
            echo "BDF to PSF conversion successful with encoding set"
            return 0
        fi
    done
    
    # If all encodings fail, try without equivalents
    echo "Trying conversion without character equivalents..."
    if bdf2psf "$bdf_file" \
       /dev/null \
       /usr/share/bdf2psf/ascii.set \
       256 "$temp_dir/$output_name.psf" 2>/dev/null; then
        echo "BDF to PSF conversion successful (basic)"
        return 0
    fi
    
    echo -e "${RED}BDF to PSF conversion failed${NC}"
    return 1
}

# Function to apply converted font
apply_converted_font() {
    local font_name="$1"
    
    # Update console-setup configuration
    sed -i "s/^FONTFACE=.*/FONTFACE=\"$font_name\"/" /etc/default/console-setup 2>/dev/null || {
        echo "FONTFACE=\"$font_name\"" >> /etc/default/console-setup
    }
    
    # Apply immediately
    setfont "/usr/share/consolefonts/${font_name}.psf.gz"
    setupcon
    
    echo -e "${GREEN}Font applied and configured for persistence${NC}"
}

# Main script
install_dependencies

echo ""
echo "Options:"
echo "1) Convert font from .tar.gz archive"
echo "2) List and convert specific font from extracted archive"
echo "3) Show current TTY font info"

read -p "Enter your choice (1-3): " choice

case $choice in
    1)
        read -p "Enter path to .tar.gz font archive: " archive_path
        
        if [ ! -f "$archive_path" ]; then
            echo -e "${RED}Archive not found: $archive_path${NC}"
            exit 1
        fi
        
        # Extract and analyze
        extract_dir=$(extract_and_analyze "$archive_path")
        
        echo ""
        echo -e "${YELLOW}Select fonts to convert:${NC}"
        font_files=($(find "$extract_dir" -type f \( -name "*.ttf" -o -name "*.otf" -o -name "*.bdf" -o -name "*.psf" -o -name "*.pcf" \)))
        
        if [ ${#font_files[@]} -eq 0 ]; then
            echo -e "${RED}No convertible font files found in archive${NC}"
            rm -rf "$extract_dir"
            exit 1
        fi
        
        echo "Found ${#font_files[@]} font file(s):"
        for i in "${!font_files[@]}"; do
            echo "$((i+1))) $(basename "${font_files[i]}")"
        done
        
        read -p "Enter number to convert (or 'all' for all fonts): " selection
        
        if [ "$selection" = "all" ]; then
            for font_file in "${font_files[@]}"; do
                base_name=$(basename "$font_file" | sed 's/\.[^.]*$//')
                output_name="custom_${base_name}"
                
                if convert_to_psf "$font_file" "$output_name"; then
                    echo -e "${GREEN}Converted: $output_name.psf.gz${NC}"
                fi
            done
        else
            if [[ "$selection" =~ ^[0-9]+$ ]] && [ "$selection" -ge 1 ] && [ "$selection" -le ${#font_files[@]} ]; then
                selected_font="${font_files[$((selection-1))]}"
                base_name=$(basename "$selected_font" | sed 's/\.[^.]*$//')
                output_name="custom_${base_name}"
                
                if convert_to_psf "$selected_font" "$output_name"; then
                    echo ""
                    read -p "Apply this font to TTY now? (y/n): " apply_now
                    if [ "$apply_now" = "y" ] || [ "$apply_now" = "Y" ]; then
                        apply_converted_font "$output_name"
                    fi
                fi
            else
                echo -e "${RED}Invalid selection${NC}"
                rm -rf "$extract_dir"
                exit 1
            fi
        fi
        
        # Cleanup
        rm -rf "$extract_dir"
        ;;
    2)
        read -p "Enter path to already extracted font directory: " font_dir
        
        if [ ! -d "$font_dir" ]; then
            echo -e "${RED}Directory not found: $font_dir${NC}"
            exit 1
        fi
        
        font_files=($(find "$font_dir" -type f \( -name "*.ttf" -o -name "*.otf" -o -name "*.bdf" -o -name "*.psf" -o -name "*.pcf" \)))
        
        if [ ${#font_files[@]} -eq 0 ]; then
            echo -e "${RED}No convertible font files found${NC}"
            exit 1
        fi
        
        echo "Found font files:"
        for i in "${!font_files[@]}"; do
            echo "$((i+1))) $(basename "${font_files[i]}")"
        done
        
        read -p "Enter number to convert: " selection
        
        if [[ "$selection" =~ ^[0-9]+$ ]] && [ "$selection" -ge 1 ] && [ "$selection" -le ${#font_files[@]} ]; then
            selected_font="${font_files[$((selection-1))]}"
            base_name=$(basename "$selected_font" | sed 's/\.[^.]*$//')
            output_name="custom_${base_name}"
            
            if convert_to_psf "$selected_font" "$output_name"; then
                echo ""
                read -p "Apply this font to TTY now? (y/n): " apply_now
                if [ "$apply_now" = "y" ] || [ "$apply_now" = "Y" ]; then
                    apply_converted_font "$output_name"
                fi
            fi
        else
            echo -e "${RED}Invalid selection${NC}"
            exit 1
        fi
        ;;
    3)
        echo "Current console configuration:"
        cat /etc/default/console-setup 2>/dev/null || echo "No configuration found"
        echo ""
        echo "Current font info:"
        showconsolefont 2>/dev/null || echo "Font info not available"
        echo ""
        echo "Available custom PSF fonts:"
        ls /usr/share/consolefonts/custom_* 2>/dev/null || echo "No custom fonts installed"
        ;;
    *)
        echo -e "${RED}Invalid choice${NC}"
        exit 1
        ;;
esac

echo ""
echo -e "${YELLOW}Note: Converted fonts are prefixed with 'custom_'${NC}"
echo -e "${YELLOW}Location: /usr/share/consolefonts/custom_*.psf.gz${NC}"
echo -e "${BLUE}Test in TTY with: Ctrl+Alt+F1-F6${NC}"
