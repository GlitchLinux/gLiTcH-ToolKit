#!/bin/bash

# Script to backup installed packages and generate installation script
# This creates a restoration script for Debian/Ubuntu systems

# Configuration
BACKUP_DIR="package_backup_$(date +%Y%m%d_%H%M%S)"
PACKAGE_LIST_FILE="installed_packages.txt"
MANUAL_PACKAGES_FILE="manual_packages.txt"
INSTALL_SCRIPT_FILE="restore_packages.sh"
APT_SOURCES_FILE="sources.list.backup"
APT_KEYS_FILE="apt_keys.txt"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_permissions() {
    if [ "$EUID" -eq 0 ]; then
        print_warning "Running as root. This is okay but not required for package listing."
    fi
}

create_backup_directory() {
    print_status "Creating backup directory: $BACKUP_DIR"
    mkdir -p "$BACKUP_DIR"
    cd "$BACKUP_DIR"
}

backup_all_packages() {
    print_status "Backing up complete package list..."
    dpkg -l | grep '^ii' > "$PACKAGE_LIST_FILE"
    print_success "Complete package list saved to $PACKAGE_LIST_FILE"
}

backup_manual_packages() {
    print_status "Identifying manually installed packages..."
    # Get packages that were manually installed (not dependencies)
    comm -23 <(apt-mark showmanual | sort) <(apt-mark showauto | sort) > "$MANUAL_PACKAGES_FILE"
    
    local count=$(wc -l < "$MANUAL_PACKAGES_FILE")
    print_success "Found $count manually installed packages"
    print_success "Manual packages list saved to $MANUAL_PACKAGES_FILE"
}

backup_apt_sources() {
    print_status "Backing up APT sources..."
    if [ -f "/etc/apt/sources.list" ]; then
        cp /etc/apt/sources.list "$APT_SOURCES_FILE"
        print_success "APT sources backed up to $APT_SOURCES_FILE"
    else
        print_warning "No /etc/apt/sources.list found"
    fi
    
    # Also backup sources.list.d directory if it exists
    if [ -d "/etc/apt/sources.list.d" ]; then
        cp -r /etc/apt/sources.list.d ./sources.list.d.backup
        print_success "APT sources.list.d directory backed up"
    fi
}

backup_apt_keys() {
    print_status "Backing up APT keys..."
    apt-key list > "$APT_KEYS_FILE" 2>/dev/null || {
        print_warning "Could not backup APT keys (apt-key might be deprecated)"
        echo "# APT keys backup failed - apt-key may be deprecated" > "$APT_KEYS_FILE"
        echo "# Manual key restoration may be required" >> "$APT_KEYS_FILE"
    }
}

create_install_script() {
    print_status "Creating package restoration script..."
    
    cat > "$INSTALL_SCRIPT_FILE" << 'EOF'
#!/bin/bash

# Automated Package Restoration Script
# Generated by generate-package-backup.sh

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    print_error "This script must be run as root (use sudo)"
    exit 1
fi

print_status "Starting package restoration process..."
print_status "Generated on: $(date)"
print_status "Original system: $(cat /etc/os-release | grep PRETTY_NAME | cut -d= -f2 | tr -d '"')"

# Update package lists
print_status "Updating package lists..."
apt update

# Check if manual_packages.txt exists
if [ ! -f "manual_packages.txt" ]; then
    print_error "manual_packages.txt not found in current directory"
    exit 1
fi

# Read packages and install
print_status "Installing packages from backup..."
total_packages=$(wc -l < manual_packages.txt)
current_package=0

# Install packages in batches to handle failures gracefully
failed_packages=()
successful_packages=()

while IFS= read -r package; do
    if [ -n "$package" ]; then
        ((current_package++))
        print_status "Installing package $current_package/$total_packages: $package"
        
        if apt install -y "$package"; then
            successful_packages+=("$package")
            print_success "Successfully installed: $package"
        else
            failed_packages+=("$package")
            print_warning "Failed to install: $package"
        fi
    fi
done < manual_packages.txt

# Summary
echo ""
print_status "=== INSTALLATION SUMMARY ==="
print_success "Successfully installed: ${#successful_packages[@]} packages"
if [ ${#failed_packages[@]} -gt 0 ]; then
    print_warning "Failed to install: ${#failed_packages[@]} packages"
    print_status "Failed packages:"
    for pkg in "${failed_packages[@]}"; do
        echo "  - $pkg"
    done
    
    # Create a retry script for failed packages
    print_status "Creating retry script for failed packages..."
    echo "#!/bin/bash" > retry_failed_packages.sh
    echo "# Retry installation of failed packages" >> retry_failed_packages.sh
    echo "sudo apt update" >> retry_failed_packages.sh
    for pkg in "${failed_packages[@]}"; do
        echo "sudo apt install -y $pkg" >> retry_failed_packages.sh
    done
    chmod +x retry_failed_packages.sh
    print_status "Retry script created: retry_failed_packages.sh"
fi

# Clean up
print_status "Cleaning up..."
apt autoremove -y
apt autoclean

print_success "Package restoration completed!"
print_status "You may want to reboot the system to ensure all services are running correctly."

# Create a verification script
cat > verify_installation.sh << 'VERIFY_EOF'
#!/bin/bash
echo "=== PACKAGE INSTALLATION VERIFICATION ==="
echo "Checking if all packages from backup are installed..."

missing_count=0
while IFS= read -r package; do
    if ! dpkg -l | grep -q "^ii  $package "; then
        echo "MISSING: $package"
        ((missing_count++))
    fi
done < manual_packages.txt

if [ $missing_count -eq 0 ]; then
    echo "✅ All packages are installed correctly!"
else
    echo "⚠️  $missing_count packages are missing"
fi
VERIFY_EOF

chmod +x verify_installation.sh
print_status "Verification script created: verify_installation.sh"
EOF

    # Make the install script executable
    chmod +x "$INSTALL_SCRIPT_FILE"
    print_success "Installation script created: $INSTALL_SCRIPT_FILE"
}

create_readme() {
    print_status "Creating README file..."
    
    cat > README.md << EOF
# Package Backup - $(date +%Y-%m-%d)

This directory contains a complete backup of installed packages from your Debian/Ubuntu system.

## Files included:

- **$INSTALL_SCRIPT_FILE** - Main restoration script (run this on target system)
- **$MANUAL_PACKAGES_FILE** - List of manually installed packages
- **$PACKAGE_LIST_FILE** - Complete list of all installed packages
- **$APT_SOURCES_FILE** - Backup of APT sources.list
- **sources.list.d.backup/** - Backup of additional APT sources
- **$APT_KEYS_FILE** - Backup of APT keys information

## How to restore on a new system:

1. Copy this entire directory to your new system
2. Navigate to this directory: \`cd $(basename $BACKUP_DIR)\`
3. Run the restoration script: \`sudo ./$INSTALL_SCRIPT_FILE\`
4. Follow the on-screen instructions

## Additional steps you may need:

1. **Restore APT sources** (if needed):
   \`\`\`bash
   sudo cp $APT_SOURCES_FILE /etc/apt/sources.list
   sudo cp -r sources.list.d.backup/* /etc/apt/sources.list.d/
   sudo apt update
   \`\`\`

2. **Verify installation**:
   \`\`\`bash
   ./verify_installation.sh
   \`\`\`

3. **Retry failed packages** (if any):
   \`\`\`bash
   ./retry_failed_packages.sh
   \`\`\`

## System Information:
- **Generated on**: $(date)
- **Hostname**: $(hostname)
- **OS**: $(lsb_release -d 2>/dev/null | cut -f2 || cat /etc/os-release | grep PRETTY_NAME | cut -d= -f2 | tr -d '"')
- **Kernel**: $(uname -r)
- **Architecture**: $(dpkg --print-architecture)
- **Total packages**: $(dpkg --get-selections | grep -c 'install$')
- **Manual packages**: $(wc -l < "$MANUAL_PACKAGES_FILE")

## Notes:
- This script installs manually selected packages, not automatic dependencies
- Some packages may fail due to different Ubuntu/Debian versions
- PPAs and external repositories may need to be added manually
- Configuration files are not included in this backup
EOF

    print_success "README.md created with detailed instructions"
}

create_system_info() {
    print_status "Collecting system information..."
    
    cat > system_info.txt << EOF
# System Information Backup
Generated on: $(date)

## System Details
Hostname: $(hostname)
OS Release: $(cat /etc/os-release)
Kernel: $(uname -a)
Architecture: $(dpkg --print-architecture)

## Package Statistics
Total installed packages: $(dpkg --get-selections | grep -c 'install$')
Manually installed packages: $(wc -l < "$MANUAL_PACKAGES_FILE")
Auto-installed packages: $(apt-mark showauto | wc -l)

## Disk Usage
$(df -h)

## Memory Info
$(free -h)
EOF

    print_success "System information saved to system_info.txt"
}

main() {
    print_status "Starting package backup process..."
    
    check_permissions
    create_backup_directory
    backup_all_packages
    backup_manual_packages
    backup_apt_sources
    backup_apt_keys
    create_install_script
    create_readme
    create_system_info
    
    cd ..
    
    print_success "Package backup completed successfully!"
    print_status "Backup directory: $BACKUP_DIR"
    print_status ""
    print_status "To restore on another system:"
    print_status "1. Copy the entire '$BACKUP_DIR' directory to the target system"
    print_status "2. cd $BACKUP_DIR"
    print_status "3. sudo ./$INSTALL_SCRIPT_FILE"
    print_status ""
    print_status "Files created:"
    ls -la "$BACKUP_DIR"
}

# Run main function
main "$@"
