#!/bin/bash

# Nano ISO Creator - Minimal Live System ISO Builder
# Auto-chainloads from ISOLINUX to GRUB2 instantly

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Install minimal dependencies
install_dependencies() {
    local missing_deps=()
    for cmd in xorriso wget lzma tar; do
        if ! command -v "$cmd" &>/dev/null; then
            missing_deps+=("$cmd")
        fi
    done
    
    if [ ${#missing_deps[@]} -gt 0 ]; then
        echo -e "${BLUE}Installing required packages: ${missing_deps[*]}${NC}"
        if [ -x "$(command -v apt-get)" ]; then
            sudo apt-get update && sudo apt-get install -y xorriso wget lzma tar
        elif [ -x "$(command -v dnf)" ]; then
            sudo dnf install -y xorriso wget lzma tar
        elif [ -x "$(command -v pacman)" ]; then
            sudo pacman -S --noconfirm xorriso wget lzma tar
        else
            echo -e "${RED}Error: Cannot install dependencies automatically${NC}"
            exit 1
        fi
    fi
}

# Download hybrid bootfiles AND additional ISO structure
download_bootfiles() {
    local target_dir="$1"
    local temp_dir="/tmp/nano_bootfiles_$"
    
    echo -e "${BLUE}Downloading ISO base structure...${NC}"
    mkdir -p "$temp_dir"
    
    if ! wget -q --progress=bar:force \
        "https://github.com/GlitchLinux/gLiTcH-ISO-Creator/raw/refs/heads/main/HYBRID-BOOTFILES.tar.lzma" \
        -O "$temp_dir/bootfiles.tar.lzma"; then
        echo -e "${RED}Error: Failed to download base ISO files${NC}"
        rm -rf "$temp_dir"
        exit 1
    fi
    
    echo -e "${BLUE}Building ISO structure in: $target_dir${NC}"
    unlzma "$temp_dir/bootfiles.tar.lzma"
    tar -xf "$temp_dir/bootfiles.tar" -C "$target_dir" --strip-components=1
    rm -rf "$temp_dir"
    
    echo -e "${GREEN}‚úÖ Base ISO files installed in: $target_dir${NC}"
}

# Create minimal GRUB config with proven theme approach
create_grub_config() {
    local iso_dir="$1"
    local name="$2"
    local vmlinuz="$3"
    local initrd="$4"
    local live_dir="$5"
    
    mkdir -p "$iso_dir/boot/grub"
    
    # Create theme configuration (only if doesn't exist)
    if [ ! -f "$iso_dir/boot/grub/theme.cfg" ]; then
        cat > "$iso_dir/boot/grub/theme.cfg" <<'EOF'
title-color: "white"
title-text: " "
title-font: "Sans Regular 16"
desktop-color: "black"
desktop-image: "/boot/grub/splash.png"
message-color: "white"
message-bg-color: "black"
terminal-font: "Sans Regular 12"

+ boot_menu {
  top = 150
  left = 15%
  width = 75%
  height = 150
  item_font = "Sans Regular 12"
  item_color = "grey"
  selected_item_color = "white"
  item_height = 20
  item_padding = 15
  item_spacing = 5
}

+ vbox {
  top = 100%
  left = 2%
  + label {text = "Press 'E' key to edit" font = "Sans 10" color = "white" align = "left"}
}
EOF
    fi
    
    # Create main GRUB configuration
    cat > "$iso_dir/boot/grub/grub.cfg" <<EOF
# GRUB2 Configuration - Minimal Setup

# Font path and graphics setup
if loadfont \$prefix/fonts/font.pf2 ; then
  set gfxmode=800x600
  set gfxpayload=keep
  insmod efi_gop
  insmod efi_uga
  insmod video_bochs
  insmod video_cirrus
  insmod gfxterm
  insmod png
  terminal_output gfxterm
fi

# Background and color setup
if background_image "/boot/grub/splash.png"; then
  set color_normal=light-gray/black
  set color_highlight=white/black
elif background_image "/splash.png"; then
  set color_normal=light-gray/black
  set color_highlight=white/black
else
  set menu_color_normal=cyan/blue
  set menu_color_highlight=white/blue
fi

# Load theme if available
if [ -s \$prefix/theme.cfg ]; then
  set theme=\$prefix/theme.cfg
fi

# Basic settings
set default=0
set timeout=10

# Live System Entries
EOF

    if [ "$live_dir" = "casper" ]; then
        # Ubuntu/Casper configuration
        cat >> "$iso_dir/boot/grub/grub.cfg" <<EOF
menuentry "$name - LIVE" {
    linux /casper/$vmlinuz boot=casper quiet splash
    initrd /casper/$initrd
}

menuentry "$name - Boot to RAM" {
    linux /casper/$vmlinuz boot=casper quiet splash toram
    initrd /casper/$initrd
}

menuentry "$name - Safe Graphics" {
    linux /casper/$vmlinuz boot=casper quiet splash nomodeset
    initrd /casper/$initrd
}
EOF
    else
        # Debian Live configuration
        cat >> "$iso_dir/boot/grub/grub.cfg" <<EOF
menuentry "$name - LIVE" {
    linux /live/$vmlinuz boot=live config quiet splash
    initrd /live/$initrd
}

menuentry "$name - Boot to RAM" {
    linux /live/$vmlinuz boot=live config quiet splash toram
    initrd /live/$initrd
}

menuentry "$name - Encrypted Persistence" {
    linux /live/$vmlinuz boot=live components quiet splash persistent=cryptsetup persistence-encryption=luks persistence
    initrd /live/$initrd
}
EOF
    fi

    cat >> "$iso_dir/boot/grub/grub.cfg" <<'EOF'

menuentry "Power Off" {
    halt
}

menuentry "Reboot" {
    reboot
}
EOF

    echo -e "${GREEN}Created GRUB configuration${NC}"
}

# Create auto-chainloading ISOLINUX config
create_isolinux_config() {
    local iso_dir="$1"
    
    # Only create if doesn't exist
    if [ ! -f "$iso_dir/isolinux/isolinux.cfg" ]; then
        cat > "$iso_dir/isolinux/isolinux.cfg" <<'EOF'
default grub2_chainload
timeout 1
prompt 0

label grub2_chainload
  linux /boot/grub/lnxboot.img
  initrd /boot/grub/core.img
EOF
    fi
}

# Create autorun.inf
create_autorun() {
    local iso_dir="$1"
    local name="$2"
    
    # Only create if doesn't exist
    if [ ! -f "$iso_dir/autorun.inf" ]; then
        cat > "$iso_dir/autorun.inf" <<EOF
[Autorun]
icon=glitch.ico
label=$name
EOF
    fi
}

# Create ISO
create_iso() {
    local source_dir="$1"
    local output_file="$2"
    local volume_label="$3"
    
    echo -e "${BLUE}Creating ISO: $output_file${NC}"
    
    # Use isohdpfx.bin from bootfiles if available
    local mbr_file="$source_dir/isolinux/isohdpfx.bin"
    if [ ! -f "$mbr_file" ]; then
        mbr_file="/usr/lib/ISOLINUX/isohdpfx.bin"
    fi
    
    xorriso -as mkisofs \
        -iso-level 3 \
        -volid "$volume_label" \
        -full-iso9660-filenames \
        -R -J -joliet-long \
        -isohybrid-mbr "$mbr_file" \
        -b isolinux/isolinux.bin \
        -c isolinux/boot.cat \
        -no-emul-boot \
        -boot-load-size 4 \
        -boot-info-table \
        -eltorito-alt-boot \
        -e boot/grub/efi.img \
        -no-emul-boot \
        -isohybrid-gpt-basdat \
        -append_partition 2 0xEF "$source_dir/boot/grub/efi.img" \
        -o "$output_file" \
        "$source_dir" 2>/dev/null
    
    if [ $? -eq 0 ]; then
        local size=$(du -h "$output_file" | cut -f1)
        echo -e "${GREEN}‚úÖ ISO created successfully!${NC}"
        echo -e "${YELLOW}üìÅ Location: $output_file${NC}"
        echo -e "${YELLOW}üìè Size: $size${NC}"
        return 0
    else
        echo -e "${RED}‚ùå ISO creation failed${NC}"
        return 1
    fi
}

# Main creation function
create_live_iso() {
    local target_dir="$1"
    
    # Validate target directory
    if [ ! -d "$target_dir" ]; then
        echo -e "${RED}Error: Directory not found: $target_dir${NC}"
        return 1
    fi
    
    # Install base ISO structure (ONLY COPY HAPPENS HERE)
    download_bootfiles "$target_dir"
    
    # Allow user to edit files
    echo -e "\n${YELLOW}=== EDIT PHASE ===${NC}"
    echo -e "${GREEN}ISO structure prepared at: $target_dir${NC}"
    echo -e "You can now customize the ISO content:"
    echo -e "  ‚Ä¢ Add your kernel and initrd to live/ or casper/"
    echo -e "  ‚Ä¢ Modify splash screens (splash.png)"
    echo -e "  ‚Ä¢ Add custom files to ISO root"
    echo -e "  ‚Ä¢ Edit existing configurations"
    echo -e "${YELLOW}Press ENTER when ready to configure bootloaders...${NC}"
    read -r
    
    # Detect live system type
    local live_dir=""
    if [ -d "$target_dir/live" ]; then
        live_dir="live"
        echo -e "${GREEN}Detected: Debian Live system${NC}"
    elif [ -d "$target_dir/casper" ]; then
        live_dir="casper"
        echo -e "${GREEN}Detected: Ubuntu/Casper system${NC}"
    else
        echo -e "${RED}Error: No live system found!${NC}"
        echo -e "Please create either:"
        echo -e "  ‚Ä¢ $target_dir/live   (for Debian-based)"
        echo -e "  ‚Ä¢ $target_dir/casper (for Ubuntu-based)"
        return 1
    fi
    
    # Find kernel/initrd (must be added by user)
    local vmlinuz=""
    local initrd=""
    
    for file in "$target_dir/$live_dir"/vmlinuz*; do
        [ -f "$file" ] && vmlinuz=$(basename "$file") && break
    done
    
    for file in "$target_dir/$live_dir"/initrd*; do
        [ -f "$file" ] && initrd=$(basename "$file") && break
    done
    
    if [ -z "$vmlinuz" ] || [ -z "$initrd" ]; then
        echo -e "${RED}Error: Missing kernel or initrd!${NC}"
        echo -e "Please add to: $target_dir/$live_dir"
        echo -e "  ‚Ä¢ vmlinuz*"
        echo -e "  ‚Ä¢ initrd*"
        return 1
    fi
    
    echo -e "${GREEN}Found kernel: $vmlinuz${NC}"
    echo -e "${GREEN}Found initrd: $initrd${NC}"
    
    # Get ISO configuration
    echo -e "\n${YELLOW}=== BOOTLOADER CONFIGURATION ===${NC}"
    local default_name=$(basename "$target_dir")
    
    read -p "Enter ISO filename [$default_name.iso]: " iso_name
    iso_name=${iso_name:-"$default_name.iso"}
    [[ "$iso_name" != *.iso ]] && iso_name="${iso_name}.iso"
    
    read -p "Enter system name [$default_name]: " system_name
    system_name=${system_name:-"$default_name"}
    
    # Auto-generate volume name (uppercase, no spaces)
    local volume_name=$(echo "$system_name" | tr '[:lower:]' '[:upper:]' | tr -cd '[:alnum:]_-' | cut -c1-32)
    read -p "Enter volume name [$volume_name]: " custom_volume
    volume_name=${custom_volume:-"$volume_name"}
    
    # Create configurations (ONLY MODIFIES BOOTLOADER FILES)
    create_grub_config "$target_dir" "$system_name" "$vmlinuz" "$initrd" "$live_dir"
    create_isolinux_config "$target_dir"
    create_autorun "$target_dir" "$system_name"
    
    # Final confirmation
    echo -e "\n${YELLOW}=== BUILD READY ===${NC}"
    echo -e "System: $system_name"
    echo -e "Volume: $volume_name"
    echo -e "Kernel: $vmlinuz"
    echo -e "Initrd: $initrd"
    echo -e "Output: $(dirname "$target_dir")/$iso_name"
    
    read -p "START ISO BUILD? (y/N): " confirm
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}Build canceled${NC}"
        return 1
    fi
    
    # Create ISO in parent directory
    local output_file="$(dirname "$target_dir")/$iso_name"
    if create_iso "$target_dir" "$output_file" "$volume_name"; then
        echo -e "${GREEN}üìÅ ISO saved to: $output_file${NC}"
        return 0
    else
        return 1
    fi
}

# Main loop
main() {
    echo -e "${YELLOW}=== Nano ISO Creator - Live System Builder ===${NC}"
    echo -e "${BLUE}Creates minimal live system ISOs with auto-chainloading${NC}"
    echo -e "${BLUE}Workflow:${NC}"
    echo -e "  1. Copies base ISO files to your directory"
    echo -e "  2. Lets you add your files and customize"
    echo -e "  3. Configures bootloaders only"
    echo -e "  4. Builds final ISO\n"
    
    # Check dependencies
    install_dependencies
    
    while true; do
        echo -e "\n${YELLOW}=== CREATE NEW ISO ===${NC}"
        read -p "Enter TARGET directory path: " target_dir
        
        if [ -z "$target_dir" ]; then
            echo -e "${YELLOW}Empty path. Exiting.${NC}"
            break
        fi
        
        # Expand tilde and resolve path
        target_dir="${target_dir/#\~/$HOME}"
        target_dir=$(realpath "$target_dir" 2>/dev/null)
        
        # Create directory if needed
        if [ ! -d "$target_dir" ]; then
            read -p "Directory doesn't exist. Create? (y/N): " create_dir
            if [[ "$create_dir" =~ ^[Yy]$ ]]; then
                mkdir -p "$target_dir" || {
                    echo -e "${RED}Failed to create directory${NC}"
                    continue
                }
            else
                continue
            fi
        fi
        
        # Warn about overwriting
        if [ "$(ls -A "$target_dir" 2>/dev/null)" ]; then
            echo -e "${YELLOW}Warning: Directory is not empty!${NC}"
            read -p "Continue? Existing files may be overwritten (y/N): " confirm_overwrite
            if [[ ! "$confirm_overwrite" =~ ^[Yy]$ ]]; then
                continue
            fi
        fi
        
        if create_live_iso "$target_dir"; then
            echo -e "\n${GREEN}üéâ ISO created successfully!${NC}"
        else
            echo -e "\n${RED}üí• ISO creation failed!${NC}"
        fi
        
        echo -e "\n${YELLOW}=== NEW PROJECT? ===${NC}"
        read -p "Create another ISO? (y/n): " continue_choice
        
        if [[ ! "$continue_choice" =~ ^[Yy]$ ]]; then
            echo -e "${GREEN}Thanks for using Nano ISO Creator!${NC}"
            break
        fi
    done
}

# Run main function
main "$@"
