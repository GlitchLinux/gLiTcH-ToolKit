#!/bin/bash

# Bonsai Linux Cyberpunk Fetch Tool Installer v3.0 - Static Layout File Method
# Creates fetch tool using exact static layout template
# Author: GlitchLinux

set -e  # Exit on any error

# Colors for script output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# Configuration variables
MOTD_DIR="/etc/update-motd.d"
BACKUP_DIR="/etc/motd-backup-$(date +%Y%m%d-%H%M%S)"
LAYOUT_FILE="/usr/local/bin/bonsaifetch-templete.txt"
LAYOUT_DIR="/usr/local/bin/"

# Function to print colored output
print_banner() {
    echo -e "${CYAN}"
    echo "╔══════════════════════════════════════════════════════════╗"
    echo "║    Bonsai Linux Fetch Tool Installer v3.0 - STATIC       ║"
    echo "║                    by GlitchLinux                        ║"
    echo "╚══════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

#sudo mkdir -p /home/root/
#mkdir -p /home/$user/ && cd /home/$user/
#sudo rm -f /home/$user/apps* && sudo rm -f /home/root/apps*
#wget https://raw.githubusercontent.com/GlitchLinux/gLiTcH-ToolKit/refs/heads/main/apps
#echo "alias apps='bash /home/$user/apps'" >> /etc/bash.bashrc

echo "alias fetch='bonsaifetch'" >> /etc/bash.bashrc
echo "alias fetch-edit='sudo nano /usr/local/bin/bonsaifetch-templete.txt'" >> /etc/bash.bashrc

print_status() { echo -e "${GREEN}[✓]${NC} $1"; }
print_info() { echo -e "${BLUE}[i]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[!]${NC} $1"; }
print_error() { echo -e "${RED}[✗]${NC} $1"; }
print_step() { echo -e "${MAGENTA}[STEP]${NC} $1"; }

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        print_error "This script must be run as root (use sudo)"
        echo "Usage: sudo $0"
        exit 1
    fi
}

# Create the EXACT static layout template file
create_static_layout_template() {
    print_step "Creating exact static layout template..."
    
    # Create directory for bonsai files
    mkdir -p "$LAYOUT_DIR"
    
    # Create the EXACT layout template from your document
    cat > "/usr/local/bin/bonsaifetch-templete.txt" << 'EOF'
" ${c2}${bold}${reset}${c2}${bold}╔══❖${reset}"
" ${c2}${bold}║${reset}${c6}${c5}  ${c6}${c5}${reset}$os_info${c2}${reset}"
" ${c2}${bold}║${reset}${c6}${c5}  ${reset}$kernel_info${c2} ${reset}"
" ${c2}${bold}║${reset}${c6}${c5} 󰉉 ${reset}$disks_space_f ${c2}${reset}"
" ${c2}${bold}║${reset}${c6}${c5} 󰩟 ${reset}$public_ipv4_adress_wan ${c2}${reset}"
" ${c2}${bold}║${reset}${c6}${c5} 󰩟 ${reset}$private_ipv4_adress_lan ${c2}${reset}"
" ${c2}${bold}║${reset}${c6}${c5} 󰍛 ${reset}$memory_info ${c2}${reset}"
" ${c2}${bold}║${reset}${c6}${c5}  ${boot_status}"
" ${c2}${bold}╚══❖${reset}"
"${reset}${reset}"
EOF
    
    print_status "Created exact static layout template: $LAYOUT_FILE"
}

# Create the bonsaifetch command that uses the static template
create_bonsaifetch_static() {
    print_step "Creating bonsaifetch with static template method..."
    
    cat > "/usr/local/bin/bonsaifetch" << 'EOF'
#!/bin/bash
# Bonsai Linux Fetch Tool - Static Template Method
# Uses exact layout template for perfect formatting

# Layout template file location
LAYOUT_TEMPLATE="/usr/local/bin/bonsaifetch-templete.txt"

# Shared color setup function - handles tput errors gracefully
setup_colors() {
    if [[ -z "$TERM" ]]; then
        export TERM="linux"
    fi
    
    if [[ -t 1 ]] && [[ -n "$TERM" ]] && command -v tput >/dev/null 2>&1; then
        if c1=$(tput setaf 1 2>/dev/null); then
            c1=$(tput setaf 1)   # Red
            c2=$(tput setaf 2)   # Green  
            c3=$(tput setaf 3)   # Yellow
            c4=$(tput setaf 4)   # Blue
            c5=$(tput setaf 5)   # Magenta
            c6=$(tput setaf 6)   # Cyan
            c7=$(tput setaf 7)   # White
            bold=$(tput bold 2>/dev/null) || bold='\033[1m'
            reset=$(tput sgr0 2>/dev/null) || reset='\033[0m'
        else
            setup_ansi_colors
        fi
    else
        setup_ansi_colors
    fi
}

setup_ansi_colors() {
    c1='\033[0;31m'   # Red
    c2='\033[0;32m'   # Green
    c3='\033[0;33m'   # Yellow
    c4='\033[0;34m'   # Blue
    c5='\033[0;35m'   # Magenta
    c6='\033[0;36m'   # Cyan
    c7='\033[0;37m'   # White
    bold='\033[1m'
    reset='\033[0m'
}

# Advanced boot detection function with multiple failsafe methods
detect_boot_type() {
    local live_score=0
    local install_score=0
    local detection_methods=()
    
    # Method 1: Kernel command line analysis (most reliable)
    if grep -qE "boot=live|boot=casper|rd.live.image|live:" /proc/cmdline 2>/dev/null; then
        ((live_score += 4))
        detection_methods+=("cmdline")
        
        # Specific live system type detection
        if grep -q "toram" /proc/cmdline 2>/dev/null; then
            echo "${c5}${reset} Ram Boot    ${bold}${c2}"
            return
        elif grep -q "persistent" /proc/cmdline 2>/dev/null; then
            echo "${c6}Persistent  ${bold}${c2}"
            return
        fi
    fi
    
    # Method 2: Live system directory structure
    local live_dirs=("/run/live" "/lib/live/mount" "/rofs" "/casper" "/run/live/medium")
    for dir in "${live_dirs[@]}"; do
        if [[ -d "$dir" ]]; then
            ((live_score += 2))
            detection_methods+=("live-dirs")
            break
        fi
    done
    
    # Method 3: SquashFS detection (primary live indicator)
    if mount | grep -q squashfs 2>/dev/null; then
        ((live_score += 3))
        detection_methods+=("squashfs")
    fi
    
    # Method 4: Root filesystem type analysis
    local root_fs_type
    root_fs_type=$(findmnt -n -o FSTYPE / 2>/dev/null || echo "unknown")
    if [[ "$root_fs_type" =~ ^(overlay|overlayfs|aufs|tmpfs)$ ]]; then
        ((live_score += 3))
        detection_methods+=("union-fs")
    elif [[ "$root_fs_type" =~ ^(ext[234]|xfs|btrfs|f2fs)$ ]]; then
        ((install_score += 4))
        detection_methods+=("persistent-fs")
    fi
    
    # Method 5: Check for live media mount points
    if findmnt /run/live/medium >/dev/null 2>&1; then
        ((live_score += 2))
        detection_methods+=("live-medium")
        
        # Check if media is read-only ISO
        if mount | grep -q "/run/live/medium.*ro.*iso9660" 2>/dev/null; then
            echo "${c6}Iso Boot    ${bold}${c2}"
            return
        fi
    fi
    
    # Method 6: LUKS encryption detection
    if [[ -d /dev/mapper ]] && ls /dev/mapper/luks-* >/dev/null 2>&1; then
        if findmnt /union >/dev/null 2>&1 || [[ $live_score -gt 0 ]]; then
            echo "${c6}Live Luks   ${bold}${c2}"
            return
        fi
    fi
    
    # Method 7: EFI detection for system type hints
    local efi_detected=false
    if [[ -d /sys/firmware/efi ]]; then
        efi_detected=true
        # Small EFI partition indicates full installation
        local esp_size
        esp_size=$(lsblk -o SIZE,PARTTYPE 2>/dev/null | grep -i efi | head -1 | awk '{print $1}' | sed 's/[^0-9.]//g')
        if [[ -n "$esp_size" ]] && command -v bc >/dev/null 2>&1; then
            if (( $(echo "$esp_size < 500" | bc -l 2>/dev/null || echo "0") )); then
                ((install_score += 2))
                detection_methods+=("small-esp")
            fi
        fi
    fi
    
    # Method 8: tmpfs usage analysis
    local tmpfs_count
    tmpfs_count=$(mount | grep tmpfs | wc -l 2>/dev/null || echo "0")
    if [[ $tmpfs_count -gt 15 ]]; then
        ((live_score += 1))
        detection_methods+=("high-tmpfs")
    fi
    
    # Method 9: RAM vs filesystem size analysis
    local total_ram used_ram root_size
    total_ram=$(free -m 2>/dev/null | awk '/^Mem:/{print $2}' || echo "0")
    root_size=$(df -m / 2>/dev/null | awk 'NR==2{print $3}' || echo "0")
    
    if [[ $root_size -gt 0 && $total_ram -gt 0 ]]; then
        local ratio=$((root_size * 100 / total_ram))
        if [[ $ratio -gt 40 ]]; then
            ((live_score += 2))
            detection_methods+=("ram-ratio")
        fi
    fi
    
    # Method 10: Check for live filesystem files
    local live_files=("/run/live/medium/live/filesystem.squashfs" "/casper/filesystem.squashfs" "/LiveOS/squashfs.img")
    for file in "${live_files[@]}"; do
        if [[ -f "$file" ]]; then
            ((live_score += 3))
            detection_methods+=("live-files")
            break
        fi
    done
    
    # Final determination with confidence scoring
    if [[ $live_score -ge 6 ]]; then
        # High confidence live system - check for RAM boot
        if ! findmnt /run/live/medium >/dev/null 2>&1 && [[ $live_score -ge 8 ]]; then
            echo "${c5} ${reset}Ram Boot    ${bold}${c2}"
        else
            echo "${c5} ${reset}Live System ${bold}${c2}"
        fi
    elif [[ $live_score -ge 3 ]]; then
        # Medium confidence live system
        echo "${c5} ${reset}Live Boot   ${bold}${c2}"
    elif [[ $install_score -ge 4 ]]; then
        # High confidence installed system
        echo "${c5}${reset}Persistent ${bold}${c2}"
    else
        # Fallback detection
        if [[ -f /etc/fstab ]] && grep -q "UUID=" /etc/fstab 2>/dev/null; then
            echo "${c5}${reset}Persistent ${bold}${c2}"
        else
            echo "${c5} ${reset}Live Boot ${bold}${c2}"
        fi
    fi
}

# Function to get system information
get_system_info() {
    hostname_info=$(cat /proc/sys/kernel/hostname 2>/dev/null || echo "Unknown")
    os_info=$(cat /etc/os-release | grep -w "PRETTY_NAME" | cut -d '=' -f2 | sed 's/"//g' || echo "Unknown")
    kernel_info=$(uname -r 2>/dev/null || echo "Unknown")
    uptime_info=$(uptime -p 2>/dev/null | sed 's/up //' || echo "Unknown")

    # Get host/model info
    if [[ -f /sys/devices/virtual/dmi/id/product_name ]]; then
        host_info=$(cat /sys/devices/virtual/dmi/id/product_name 2>/dev/null || echo "Unknown")
        if [[ -f /sys/devices/virtual/dmi/id/product_version ]]; then
            host_version=$(cat /sys/devices/virtual/dmi/id/product_version 2>/dev/null || echo "")
            [[ "$host_version" != "Unknown" ]] && [[ -n "$host_version" ]] && host_info="$host_info $host_version"
        fi
    else
        host_info="Unknown"
    fi
    
    memory_info=$(free -h 2>/dev/null | awk '/^Mem:/ {print $3 "/" $2}' || echo "Unknown")
    disks_space_f=$(df -h / 2>/dev/null | awk 'NR==2 {print $3 "/" $2 " (" $5 " used)"}' || echo "Unknown")
    
    # Get IP addresses
    private_ipv4_adress_lan=$(ip route get 1.1.1.1 2>/dev/null | awk '{print $7; exit}' || hostname -I 2>/dev/null | awk '{print $1}' || echo "Unavailable")
    public_ipv4_adress_wan=$(timeout 2 curl -s ifconfig.me 2>/dev/null || echo "Unavailable")
    
    # Get CPU info
    cpu_info=$(grep "model name" /proc/cpuinfo 2>/dev/null | head -1 | cut -d: -f2 | sed 's/^ *//' | sed 's/ CPU.*//' || echo "Unknown")
    
    # Get package count
    if command -v dpkg >/dev/null 2>&1; then
        packages=$(dpkg -l 2>/dev/null | grep -c "^ii" || echo "Unknown")
    else
        packages="Unknown"
    fi
}

# Function to display using static template - GUARANTEED PERFECT LAYOUT
display_static_layout() {
    # Check if template file exists
    if [[ ! -f "$LAYOUT_TEMPLATE" ]]; then
        echo "Error: Layout template not found at $LAYOUT_TEMPLATE"
        echo "Please reinstall bonsaifetch or create the template file."
        return 1
    fi
    
    # Get dynamic boot status
    local boot_status
    boot_status=$(detect_boot_type)
    
    # Read the static template and substitute variables using eval
    echo ""
    while IFS= read -r line || [[ -n "$line" ]]; do
        eval "echo \"$line\""
    done < "$LAYOUT_TEMPLATE"
}

# Typewriter effect function
typewriter() {
    local text="$1"
    local delay="${2:-0.06}"
    
    for (( i=0; i<${#text}; i++ )); do
        printf "%b" "${text:$i:1}"
        sleep "$delay"
    done
    printf "\n"
}

# Main fetch function
main() {
    # Initialize colors
    setup_colors
    
    # Get system information
    get_system_info
    
    # Display using the static template - PERFECT LAYOUT GUARANTEED
    display_static_layout
    
    # Add typewriter effects if requested
    if [[ "$1" == "--typewriter" ]] || [[ $- == *i* ]]; then
        typewriter "${c7}-> ${c7}WELCOME${bold}${c7} to $os_info!"
        typewriter "${c7}-> ${c6}apps${bold}${c7} start CLI Toolkit"

        # Show SSH connection info if applicable
        if [[ -n "$SSH_CLIENT" ]] || [[ -n "$SSH_TTY" ]]; then
            ssh_ip=$(echo "$SSH_CLIENT" | cut -d' ' -f1 2>/dev/null || echo "Unknown")
            echo ""
            typewriter "   ${c5}SSH connection from: $ssh_ip${reset}" 0.02
        fi
        echo ""
    fi
    
    # Reset colors
    printf "${reset}"
}

# Parse arguments
case "$1" in
    "--help"|"-h")
        echo "Bonsai Linux Fetch Tool - Static Template Edition"
        echo "Usage: bonsaifetch [options]"
        echo ""
        echo "Options:"
        echo "  --typewriter    Include typewriter effects"
        echo "  --help, -h      Show this help message"
        echo ""
        echo "Examples:"
        echo "  bonsaifetch                # Perfect static layout"
        echo "  bonsaifetch --typewriter   # With typewriter effects"
        echo ""
        echo "Template File: $LAYOUT_TEMPLATE"
        echo ""
        echo "Advanced Boot Detection:"
        echo "  • LIVE SYSTEM   - Standard live system"
        echo "  • RAM BOOT      - Live system copied to RAM"
        echo "  • LIVE LUKS     - Encrypted live system"
        echo "  • ISO BOOT      - Booted from ISO/IMG"
        echo "  • PERSISTENT    - Live system with persistence"
        echo "  • FULL SYSTEM   - Normal installed system"
        echo ""
        echo "Static Layout Features:"
        echo "  ✓ Uses exact static template file"
        echo "  ✓ Perfect ASCII art positioning guaranteed"
        echo "  ✓ No variable-length formatting issues"
        echo "  ✓ Consistent layout every time"
        echo "  ✓ Easy to modify template if needed"
        exit 0
        ;;
    *)
        main "$@"
        ;;
esac
EOF
    
    chmod +x "/usr/local/bin/bonsaifetch"
    print_status "Created static template bonsaifetch: /usr/local/bin/bonsaifetch"
}

# Create management tools
create_management_tools() {
    print_step "Creating management tools..."
    
    cat > "/usr/local/bin/bonsai-motd" << 'EOF'
#!/bin/bash
# Bonsai Linux MOTD Management Tool - Static Template Edition

MOTD_DIR="/etc/update-motd.d"
LAYOUT_TEMPLATE="/usr/local/share/bonsai/layout-template.txt"

case "$1" in
    "test")
        echo "Testing Bonsai Linux Static MOTD..."
        echo ""
        if command -v bonsaifetch >/dev/null 2>&1; then
            bonsaifetch --typewriter
        else
            echo "bonsaifetch command not found"
        fi
        ;;
    "enable")
        if [[ -f "$MOTD_DIR/01-bonsai-header" ]]; then
            chmod +x "$MOTD_DIR/01-bonsai-header"
            echo "Bonsai Static MOTD enabled - will show on login"
        else
            echo "MOTD script not found - please reinstall"
        fi
        ;;
    "disable")
        chmod -x "$MOTD_DIR"/??-bonsai-* 2>/dev/null
        echo "Bonsai MOTD disabled - use 'bonsaifetch' command manually"
        ;;
    "update")
        if command -v update-motd >/dev/null 2>&1; then
            update-motd
            echo "MOTD cache updated"
        else
            echo "update-motd command not available"
        fi
        ;;
    "edit-template")
        if [[ -f "$LAYOUT_TEMPLATE" ]]; then
            nano "$LAYOUT_TEMPLATE"
            echo "Template edited. Changes will take effect immediately."
        else
            echo "Template file not found: $LAYOUT_TEMPLATE"
        fi
        ;;
    *)
        echo "Bonsai Linux Static MOTD Management Tool"
        echo "Usage: $0 {command}"
        echo ""
        echo "Commands:"
        echo "  test            - Show MOTD preview"
        echo "  enable          - Enable MOTD on login"
        echo "  disable         - Disable MOTD on login"
        echo "  update          - Update MOTD cache"
        echo "  edit-template   - Edit the static layout template"
        echo ""
        echo "Primary Usage:"
        echo "  bonsaifetch              - Perfect static layout"
        echo "  bonsaifetch --typewriter - With typewriter effects"
        echo ""
        echo "Template File: $LAYOUT_TEMPLATE"
        echo ""
        echo "Static Layout Features:"
        echo "  ✓ Uses exact static template file for perfect positioning"
        echo "  ✓ No variable-length formatting issues"
        echo "  ✓ Consistent ASCII art alignment every time"
        echo "  ✓ Easy template modification with 'edit-template' command"
        echo ""
        echo "Note: MOTD is disabled by default. Use 'bonsaifetch' command instead."
        exit 1
        ;;
esac
EOF

    chmod +x "/usr/local/bin/bonsai-motd"
    print_status "Created static template management tool: bonsai-motd"
}

# Create basic MOTD files (disabled by default)
create_basic_motd() {
    print_step "Creating basic MOTD files (disabled by default)..."
    
    # Ensure MOTD directory exists
    mkdir -p "$MOTD_DIR"
    
    cat > "$MOTD_DIR/01-bonsai-header" << 'EOF'
#!/bin/bash
# Bonsai Linux MOTD - Static Template Method
# This script is disabled by default - use 'bonsaifetch' command instead

# Execute the standalone bonsaifetch command
if command -v bonsaifetch >/dev/null 2>&1; then
    bonsaifetch --typewriter
else
    echo "bonsaifetch command not found"
fi
EOF
    
    chmod -x "$MOTD_DIR/01-bonsai-header"  # DISABLED by default
    print_status "Created disabled MOTD script (use 'sudo bonsai-motd enable' to activate)"
}

# Test the static layout
test_static_layout() {
    print_step "Testing static layout template..."
    
    echo ""
    print_info "Static Layout Test:"
    echo -e "${CYAN}╔════════════════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║                         STATIC TEMPLATE TEST                               ║${NC}"
    echo -e "${CYAN}╚════════════════════════════════════════════════════════════════════════════╝${NC}"
    
    # Test bonsaifetch with static template
    if command -v bonsaifetch >/dev/null 2>&1; then
        bonsaifetch --typewriter 2>/dev/null || {
            print_warning "bonsaifetch test completed with warnings"
        }
    else
        print_error "bonsaifetch command not found"
    fi
    
    echo -e "${CYAN}╚════════════════════════════════════════════════════════════════════════════╝${NC}"
    echo ""
}

# Main installation function
main() {
    print_banner
    
    check_root
    
    print_info "Starting Bonsai Linux Static Template Fetch Tool installation..."
    print_info "This will create:"
    print_info "  • Static layout template file with EXACT positioning"
    print_info "  • 'bonsaifetch' command that uses the static template"
    print_info "  • Perfect ASCII art alignment guaranteed"
    print_info "  • Advanced boot detection with 10+ verification methods"
    print_info "  • Management tools for template editing"
    print_info "  • MOTD components (DISABLED by default)"
    
    # Ask for confirmation
    read -p "Continue with installation? [Y/n]: " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        print_info "Installation cancelled"
        exit 0
    fi
    
    # Installation steps
    create_static_layout_template
    create_bonsaifetch_static
    create_management_tools
    create_basic_motd
    test_static_layout
    
    # Final information
    echo ""
    print_status "Bonsai Linux Static Template Fetch Tool installation completed!"
    echo ""
    print_info "🎯 Primary Tool Installed:"
    echo -e "  ${GREEN}• bonsaifetch${NC}               - Perfect static layout system info"
    echo -e "  ${GREEN}• bonsaifetch --typewriter${NC}  - With typewriter effects"
    echo ""
    print_info "📁 Files Created:"
    echo "  • Fetch Tool: /usr/local/bin/bonsaifetch"
    echo "  • Layout Template: $LAYOUT_FILE"
    echo "  • Management Tool: /usr/local/bin/bonsai-motd"
    echo "  • MOTD Scripts: $MOTD_DIR (DISABLED by default)"
    echo ""
    print_info "🔧 Usage Examples:"
    echo -e "  ${CYAN}bonsaifetch${NC}                    # Perfect static layout"
    echo -e "  ${CYAN}bonsaifetch --typewriter${NC}       # With animations"
    echo -e "  ${CYAN}sudo bonsai-motd enable${NC}        # Enable MOTD on login"
    echo -e "  ${CYAN}sudo bonsai-motd edit-template${NC} # Edit layout template"
    echo ""
    print_info "✨ Static Template Features:"
    echo "  ✓ Uses exact static template file from your specification"
    echo "  ✓ Perfect ASCII art positioning guaranteed every time"
    echo "  ✓ No variable-length formatting issues ever"
    echo "  ✓ Consistent layout regardless of content length"
    echo "  ✓ Easy template modification with management tools"
    echo "  ✓ Template file: $LAYOUT_FILE"
    echo ""
    print_info "🚀 Boot Detection Types:"
    echo "  • LIVE SYSTEM   - Standard live system from media"
    echo "  • RAM BOOT      - Live system copied to RAM"
    echo "  • LIVE LUKS     - Encrypted live system"
    echo "  • ISO BOOT      - Booted from read-only ISO"
    echo "  • PERSISTENT    - Live system with persistence"
    echo "  • FULL SYSTEM   - Normal installed system"
    echo ""
    print_warning "MOTD is DISABLED by default - use 'bonsaifetch' command instead!"
    print_info "Try it now: bonsaifetch --typewriter"
    echo ""
    print_info "🔧 Template Editing:"
    echo -e "  ${CYAN}sudo bonsai-motd edit-template${NC}  # Edit the exact layout"
    echo "  The template uses variable substitution with perfect positioning"
    echo "  Variables: \$boot_status, \$os_info, \$kernel_info, \$cpu_info, etc."
}

# Run the main function
main "$@"

cd /tmp && wget https://raw.githubusercontent.com/GlitchLinux/gLiTcH-ToolKit/refs/heads/main/CaskaydiaCove-Icons-Install.sh && sudo bash CaskaydiaCove-Icons-Install.sh && exit

